{"version":3,"sources":["js/util.js","js/app.js"],"names":["setcolor","e","color","dataset","querySelector","style","backgroundColor","setlabel","hex","rgb","innerText","random_hex","i","Math","random","toString","copy","data","parent","document","createElement","appendChild","body","getSelection","selectAllChildren","execCommand","removeChild","palettes","querySelectorAll","change","getElementById","title","clear","Array","from","map","addEventListener","forEach","palette","checked","colors"],"mappings":";AAuBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,QAAA,WAAA,QAAA,SAAA,QAAA,cAAA,EAtBA,IAAMA,EAAW,SAACC,GACVC,IAAAA,EAAQD,EAAEE,QAAQD,MAGjBD,OAFQA,EAAEG,cAAc,WACxBC,MAAMC,gBAAkBJ,EACxBD,GAkBT,QAAA,SAAA,EAhBA,IAAMM,EAAW,SAACN,GACVO,IAAAA,EAAMP,EAAEE,QAAQD,MAChBO,EAAMR,EAAEG,cAAc,WAAWC,MAAMC,gBAGtCL,OAFPA,EAAEG,cAAc,UAAUM,UAAYF,EACtCP,EAAEG,cAAc,QAAQM,UAAYD,EAC7BR,GAWT,QAAA,SAAA,EARA,IAAMU,EAAa,WAEZ,IADDT,IAAAA,EAAQ,IACHU,EAAI,EAAGA,EAAI,EAAGA,IACrBV,IAAU,GAAKW,KAAKC,SAAW,GAAGC,SAAS,IAEtCb,OAAAA,GAGT,QAAA,WAAA,EAAA,IAAMc,EAAO,SAACC,GACNC,IAAAA,EAASC,SAASC,cAAc,OAChCnB,EAAIkB,SAASC,cAAc,QACjCnB,EAAES,UAAYO,EACdC,EAAOG,YAAYpB,GACnBkB,SAASG,KAAKD,YAAYH,GAE1BC,SAASI,eAAeC,kBAAkBN,GAC1CC,SAASM,YAAY,QAErBN,SAASG,KAAKI,YAAYR,IAV5B,QAAA,KAAA;;ACQK,aA/BL,IAAA,EAAA,QAAA,UAEMS,EAAWR,SAASS,iBAAiB,YACrCC,EAASV,SAASW,eAAe,UACjCC,EAAQZ,SAASW,eAAe,SAEhCE,EAAQ,WACZC,MAAMC,KAAKP,GACRQ,IAAInC,EADP,UAEGmC,IAAI5B,EAFP,WAKFsB,EAAOO,iBAAiB,QAAS,WAC/BT,EAASU,QAAQ,SAAAC,GACGA,EAAQlC,cAAc,iBAAiBmC,UAEvDD,EAAQnC,QAAQD,OAAQ,EAAxB,EAAA,iBAGJ8B,MAGFD,EAAMK,iBAAiB,QAAS,WAC9BL,EAAM1B,MAAMH,OAAQ,EAApB,EAAA,cACIsC,IAAAA,EAAS,GACbb,EAASU,QAAQ,SAAAC,GACfE,GAAUF,EAAQnC,QAAQD,MAAQ,QAE/BsC,EAAAA,EAAAA,MAAAA,KAGPR","file":"app.9fad92d0.js","sourceRoot":"../src","sourcesContent":["\nconst setcolor = (e) => {\n  const color = e.dataset.color\n  const sample = e.querySelector('.sample')\n  sample.style.backgroundColor = color\n  return e\n}\nconst setlabel = (e) => {\n  const hex = e.dataset.color\n  const rgb = e.querySelector('.sample').style.backgroundColor\n  e.querySelector('.label').innerText = hex\n  e.querySelector('.rgb').innerText = rgb\n  return e\n}\n\nconst random_hex = () => {\n  let color = \"#\"\n  for (let i = 0; i < 6; i++) {\n    color += (16 * Math.random() | 0).toString(16)\n  }\n  return color\n}\n\nconst copy = (data) => {\n  const parent = document.createElement('div');\n  const e = document.createElement('span')\n  e.innerText = data\n  parent.appendChild(e)\n  document.body.appendChild(parent)\n  \n  document.getSelection().selectAllChildren(parent)\n  document.execCommand(\"Copy\")\n\n  document.body.removeChild(parent)\n}\n\nexport { setcolor, setlabel, random_hex, copy}\n","import { setcolor, setlabel, random_hex, copy } from './util'\n\nconst palettes = document.querySelectorAll('.palette')\nconst change = document.getElementById(\"change\")\nconst title = document.getElementById('title')\n\nconst clear = () => {\n  Array.from(palettes)\n    .map(setcolor)\n    .map(setlabel)\n}\n\nchange.addEventListener('click', () => {\n  palettes.forEach(palette => {\n    const is_locked = palette.querySelector('[name=\"lock\"]').checked\n    if (!is_locked) {\n      palette.dataset.color = random_hex()\n    }\n  })\n  clear()\n})\n\ntitle.addEventListener('click', () => {\n  title.style.color = random_hex();\n  let colors = \"\";\n  palettes.forEach(palette => {\n    colors += palette.dataset.color + '\\n'\n  })\n  copy(colors)\n})\n\nclear()\n"]}